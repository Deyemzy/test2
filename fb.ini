
###############################
#        SERVICE              #
###############################
[SERVICE]
  Flush        5
  Log_Level    info
  Daemon       Off
  Parsers_File /etc/fluent-bit/parsers.conf
  Plugins_File /etc/fluent-bit/plugins.conf

  # Enable HTTP Server for monitoring Fluent Bit
  http_server  On
  http_listen  0.0.0.0
  http_port    2020

  # Enable Storage Metrics
  storage.metrics On

###############################
#        INPUTS               #
###############################
[INPUT]
  Name              tail
  Path              /usr/bin/jscape/mft_server/var/log/server0.log
  multiline.parser  jscape_multiline   # Correct multiline handling
  Tag               jscape_logs
  Skip_Long_Lines   On
  Refresh_Interval  10
  DB                /etc/fluent-bit/db/jscape-logs.db

###############################
#        FILTERS              #
###############################
# Apply a Lua script to add a timestamp or modify log fields if needed
[FILTER]
  Name   lua
  Match  jscape_logs
  Script /etc/fluent-bit/scripts/append_time_field.lua
  Call   append_time_field

# Modify Records: Add custom fields to logs
[FILTER]
  Name   record_modifier
  Match  jscape_logs
  Record app        jscape
  Record source     ${HOSTNAME}
  Record log_type   security_event  # Customize based on JSCAPE log contents

###############################
#        OUTPUTS              #
###############################
# Output to stdout for debugging
[OUTPUT]
  Name   stdout
  Match  *

# Send logs to HTTP endpoint (FluentD, Loki, or other log aggregators)
[OUTPUT]
  Name    http
  Match   *
  Host    xxxx
  Port    443
  URI     /http.iris
  Format  json
  tls     On



=======
[MULTILINE_PARSER]
    name          jscape_multiline
    type          regex
    flush_timeout 5000

    rule      "start_state"  "/^\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}:\d{2}/"  "cont"
    rule      "cont"         "/^\s+at.*/" "cont"




=======

function append_time_field(tag, timestamp, record)
    local new_record = record
    new_record["log_timestamp"] = os.date("%Y-%m-%d %H:%M:%S", timestamp)
    return 2, timestamp, new_record
end






























###############################
#        SERVICE              #
###############################
[SERVICE]
  Flush        5               # Interval in seconds to flush logs to the destination
  Log_Level    info            # Logging verbosity: error, warning, info, debug, trace
  Daemon       Off             # Keep Fluent Bit running in the foreground for debugging
  Parsers_File parsers.conf    # Load custom parsers if needed
  Plugins_File plugins.conf    # Load external plugins (if required)

# Enable HTTP Server for metrics (Optional)
http_server  Off
http_listen  0.0.0.0
http_port    2020

# Enable Storage Metrics (Optional)
storage.metrics on

###############################
#        INPUTS               #
###############################
[INPUT]
  Name              tail
  Path              /var/log/jscape-mft-server.log  # Change this to the actual JSCAPE log file path
  Multiline         On                              # Enable multiline log handling
  Parser_Firstline  jscape_log_regex               # Define a regex parser if logs are multiline
  Tag               jscape_logs                    # Unique tag for filtering
  Skip_Long_Lines   On                             
  Refresh_Interval  10                              # Check for new logs every 10 seconds
  DB                /etc/fluent-bit/db/jscape-logs.db  # Maintain log position to avoid duplicate processing

###############################
#        FILTERS              #
###############################

# Apply a Lua script to add a timestamp or modify log fields if needed
[FILTER]
  Name   lua
  Match  jscape_logs
  Script /etc/fluent-bit/scripts.lua   # Ensure this script exists
  Call   append_time_field

# Modify Records: Add custom fields to logs
[FILTER]
  Name   record_modifier
  Match  jscape_logs
  Record app        jscape
  Record source     ${HOSTNAME}
  Record log_type   security_event  # Customize based on JSCAPE log contents

###############################
#        OUTPUTS              #
###############################

# Send logs to Loki (Recommended for Grafana visualization)
[OUTPUT]
  Name        loki
  Match       *
  Host        loki-server-address  # Change to your Loki server address
  Port        3100
  Labels      job=jscape_logs,source=fluentbit

# Alternative: Send logs to Elasticsearch
# [OUTPUT]
#   Name  es
#   Match *
#   Host  elasticsearch-server
#   Port  9200
#   Index jscape-logs

# Alternative: Send logs to Prometheus
# [OUTPUT]
#   Name  prometheus_remote_write
#   Match *
#   Host  prometheus-server
#   Port  9090




















function append_time_field(tag, timestamp, record)
    -- Create a new table for modified record
    local new_record = record

    -- Add a human-readable timestamp
    new_record["log_timestamp"] = os.date("%Y-%m-%d %H:%M:%S", timestamp)

    -- Extract log level from message if it exists
    if new_record["message"] then
        if string.match(new_record["message"], "ERROR") then
            new_record["log_level"] = "ERROR"
        elseif string.match(new_record["message"], "WARNING") then
            new_record["log_level"] = "WARNING"
        elseif string.match(new_record["message"], "INFO") then
            new_record["log_level"] = "INFO"
        else
            new_record["log_level"] = "UNKNOWN"
        end
    end

    -- Return modified record
    return 2, timestamp, new_record
end

