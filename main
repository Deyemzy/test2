# VPC for CRADA project
resource "aws_vpc" "crada_vpc" {
  cidr_block           = var.vpc_cidr_block
  enable_dns_support   = true
  enable_dns_hostnames = true
  
  tags = {
    Name        = "${var.project_name}-vpc"
    Environment = var.environment
  }
}

# Create two subnets in different availability zones
resource "aws_subnet" "crada_subnet_1" {
  vpc_id                  = aws_vpc.crada_vpc.id
  cidr_block              = cidrsubnet(var.vpc_cidr_block, 4, 0)
  availability_zone       = "${var.aws_region}a"
  map_public_ip_on_launch = true
  
  tags = {
    Name        = "${var.project_name}-subnet-1"
    Environment = var.environment
  }
}

resource "aws_subnet" "crada_subnet_2" {
  vpc_id                  = aws_vpc.crada_vpc.id
  cidr_block              = cidrsubnet(var.vpc_cidr_block, 4, 1)
  availability_zone       = "${var.aws_region}b"
  map_public_ip_on_launch = true
  
  tags = {
    Name        = "${var.project_name}-subnet-2"
    Environment = var.environment
  }
}

# Internet Gateway
resource "aws_internet_gateway" "crada_igw" {
  vpc_id = aws_vpc.crada_vpc.id
  
  tags = {
    Name        = "${var.project_name}-igw"
    Environment = var.environment
  }
}

# Route Table for public access
resource "aws_route_table" "crada_public_rt" {
  vpc_id = aws_vpc.crada_vpc.id
  
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.crada_igw.id
  }
  
  tags = {
    Name        = "${var.project_name}-public-rt"
    Environment = var.environment
  }
}

# Associate Route Table with Subnets
resource "aws_route_table_association" "subnet_1_rt_assoc" {
  subnet_id      = aws_subnet.crada_subnet_1.id
  route_table_id = aws_route_table.crada_public_rt.id
}

resource "aws_route_table_association" "subnet_2_rt_assoc" {
  subnet_id      = aws_subnet.crada_subnet_2.id
  route_table_id = aws_route_table.crada_public_rt.id
}

# Security Group for Redshift
resource "aws_security_group" "redshift_sg" {
  name        = "${var.project_name}-redshift-sg"
  description = "Security group for Redshift cluster"
  vpc_id      = aws_vpc.crada_vpc.id
  
  ingress {
    from_port   = 5439
    to_port     = 5439
    protocol    = "tcp"
    cidr_blocks = [var.vpc_cidr_block]
  }
  
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  tags = {
    Name        = "${var.project_name}-redshift-sg"
    Environment = var.environment
  }
}

# Security Group for Lambda functions
resource "aws_security_group" "lambda_sg" {
  name        = "${var.project_name}-lambda-sg"
  description = "Security group for Lambda functions"
  vpc_id      = aws_vpc.crada_vpc.id
  
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  tags = {
    Name        = "${var.project_name}-lambda-sg"
    Environment = var.environment
  }
}

# Redshift Subnet Group
resource "aws_redshift_subnet_group" "redshift_subnet_group" {
  name       = "${var.project_name}-redshift-subnet-group"
  subnet_ids = [aws_subnet.crada_subnet_1.id, aws_subnet.crada_subnet_2.id]
  
  tags = {
    Name        = "${var.project_name}-redshift-subnet-group"
    Environment = var.environment
  }
}






====



variable "vpc_cidr_block" {
  description = "CIDR block for the VPC"
  type        = string
  default     = "172.25.48.0/20"  # Adjust the subnet mask as needed
}





===


resource "aws_redshift_cluster" "data_product" {
  # ... existing configuration ...
  
  cluster_subnet_group_name = aws_redshift_subnet_group.redshift_subnet_group.name
  vpc_security_group_ids    = [aws_security_group.redshift_sg.id]
  
  # ... rest of configuration ...
}



===



resource "aws_lambda_function" "etl_trigger" {
  # ... existing configuration ...
  
  vpc_config {
    subnet_ids         = [aws_subnet.crada_subnet_1.id, aws_subnet.crada_subnet_2.id]
    security_group_ids = [aws_security_group.lambda_sg.id]
  }
  
  # ... rest of configuration ...
}

resource "aws_lambda_function" "scheduled_etl_trigger" {
  # ... existing configuration ...
  
  vpc_config {
    subnet_ids         = [aws_subnet.crada_subnet_1.id, aws_subnet.crada_subnet_2.id]
    security_group_ids = [aws_security_group.lambda_sg.id]
  }
  
  # ... rest of configuration ...
}



